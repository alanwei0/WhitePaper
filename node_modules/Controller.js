var Controller = {
    'room_cache':[],
    'roomCacheIsFull': (function(){
        var that = this;
        var room_cache_size = 1000;

        return function(){
            if(that.room_cache.length < room_cache_size) return false;
            return true;
        };
    })(),
    /**
    *@desciption  create a new room
    *@param {String} roomId, the id of the new room
    *@param {String} roomPassword, the password of the new room
    *@param {Socket} creator, creator's nickname
    *@return null 
    */
    'createRoom': function(room){
        if(!roomCacheIsFull){
            room_cache.push(room);
        }else{
            this.newToCache(room);
        }

        MongoManager.addRoom(room);
        
    },

    'newToCache':function(newroom){
        room_cache.shift();
        room_cache.push(newroom);
    },

    /**
    *@desciption  come in to a room
    *@param {String} roomId, the id of the new room
    *@param {String} roomPassword, the password of the new room
    *@param {Socket} partner, partner's nickname
    *@return null 
    */
    'comeInRoom': function(roomId, roomPassword, partner){

    },

    'leaveRoom': function(){

    },

    'backToRoom': function(){

    },
};

//=================================================
var util = require('util');
var EventEmitter = require('events').EventEmitter;

var Controller = function Controller(){};

util.inherits(Controller,EventEmitter);

Controller.prototype.init = function(emitter){
    if(!this.emitter) this.emitter = emitter;
    this.on('load_room_id_req',this.makeRoomId);
    this.
};

Controller.prototype.callBack = function(event, data){
    if(!this.emitter) console.log('emitter is not inited');
    this.emitter.emit(event,data);
}

Controller.prototype.makeRoomId = function(){
    var time = new Date();
    time = time.getTime();
    var roomId = (time-13131313)*13;
    this.callback('load_room_id_res',roomId);
};