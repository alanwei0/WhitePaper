var MongoManger = function MongoManager{
    this.db;
    this.new_room;//{_id , password , createTime , creator , partner}
    this.new_stroke_path;
    this.rooms;
    this.strokepath;
};

MongoManager.prototype.init = function(host, port, name , server_options, db_options){
    if(!this.db){
        var mongodb = require("mongodb");
        var mongoserver = new mongodb.Server(host, port, server_options);
        this.db = new mongodb.Db(name, mongoserver, db_options);
        this.db.open(function(err,db){
            db.on("close", function(error){
                console.log("Connection to the database was closed!");
            });
        });
        this.rooms = this.db.collection('rooms');
        this.strokepath = this.db.collection('strokepath');
    }     
};

MongoManager.prototype.addRoom = function(room){
    if(!room) console.log('database is not inited');
    this.new_room._id = room[0];
    this.new_room.password = room[1];
    this.new_room.createTime = new Date();
    this.new_room.creator = room[2];
    
    rooms.insert(this.new_room, {'safe':true}, function(err, records){
        if(err){
            console.log(err);
        }else{
            console.log("Record added as "+records[0]._id);
        }  
    });
};

MongoManager.prototype.roomExist = function(roomId){
    var isExist = false;
    this.rooms.findOne({'_id': roomId}, function(err,doc){
        if(err) console.log(err);
        if(doc) isExist = true;

    });
    return isExist;

};

MongoManager.prototype.isInRoom = function(roomId, password, username){
    var valid = false;
    var document;
    var self = this;
    this.rooms.findOne({'_id':roomId , 'password':password}, function(err,doc){
        if(err) console.log(err);
        if(doc){
            valid = true;
            document = doc;
        }
        if(!valid) return false;
        if(document.creator === username || document.partner === username){
            return true;
        }else{
            this.addPartnerIntoRoom(document._id , username);
            return true;
        }
    }); 
};

MongoManager.prototype.addPartnerIntoRoom = function(roomId, partner){
    this.rooms.update({'_id':roomId},{$set: {'partner':partner}});
};

MongoManager.prototype.

module.exports = MongoManager;
