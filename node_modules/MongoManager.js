function MongoManager(){
    this.db;
    this.new_room;//{_id , password , createTime , creator , partner}
    this.new_stroke_path;

}

MongoManager.prototype.init = function(host, port, name , server_options, db_options){
    var Db = require('mongodb').Db;
    var Server = require('mongodb').Server;
    this.db = new Db(name, new Server(host, port, server_options), db_options);
    this.db.open(function(err,db){
        db.on("close", function(error){
            console.log("Connection to the database was closed!");
        });
    });
    
};

MongoManager.prototype.createRoom = function(room , callback){
    console.log('mongo add new Room');
    var self = this;

    var check_room = self.checkRoomId(room[0]);   
    if(!check_room[0]) return callback(check_room);

    var check_password = self.checkPassword(room[1]);
    if(!check_password[0]) return callback(check_password);

    var check_user = self.checkUsername(room[2]);
    if(!check_user[0]) return callback(check_user);

    self.roomExist(room[0] , function(data){
        if(data[0]) return callback(data);

        self.new_room = {};
        self.new_room._id = room[0];
        self.new_room.password = room[1];
        self.new_room.createTime = new Date();

        self.db.collection('rooms').insert(self.new_room, {'w':1 , 'journal':true}, function(err, doc){
            if(err){
                console.log(err);
                return callback([0 , '']);
            }
            if(doc){
                console.log("Record added as "+doc[0]._id);
                return callback([1 , [doc[0]._id , room[2]]]); //room[2] = username
            }else{
                return callback([0 , '']);
            }

        });
    });
};

MongoManager.prototype.roomExist = function(roomId , callback){
    this.db.collection('rooms').findOne({'_id': roomId}, function(err,doc){
        if(err){
            console.log(err);
        }else{
            if(doc){
                callback([1,'']);
            }else{
                callback([0,'']);
            }
        }
        
    });

};

MongoManager.prototype.joinRoom = function(data , callback){
    var self = this;

    var roomId = data[0];
    var password = data[1];
    var user = data[2];

    var check_room = this.checkRoomId(roomId);
    var check_password = this.checkPassword(password);
    var check_user = this.checkUsername(user);

    if(!check_room[0]) return callback(check_room);
    if(!check_password[0]) return callback(check_password);
    if(!check_user[0]) return callback(check_user);

    self.db.collection('rooms').findOne({'_id': roomId , 'password': password} , function(err, doc){
        if(err){
            console.log(err);
            return callback([0,err]);
        }
        if(doc){
            console.log(doc);
            return callback([1,[doc._id , user]]);
        }else{
            return callback([0,'doc is null']);
        }
    });
};

MongoManager.prototype.saveCanvas = function(data , callback){
    var self = this;
    var roomId = data_arr[0];
    var body = data_arr[1];
    self.roomExist(roomId , function(data){
        if(data[0]) return callback(data);
        self.db.collection('canvas').insert({'_id': roomId , 'img': body});
    });  
};

MongoManager.prototype.getCanvas = function(roomId , callback){
    self.db.collection('canvas').findOne({'_id': roomId} , function(err,doc){
        if(err){
            console.log(err);
            return callback([0,err]);
        }
        if(doc){
            console.log(doc);
            return callback([1,doc]);
        }else{
            return callback([0,'doc is null']);
        }
    });
};

//==========================================================================================

MongoManager.prototype.checkRoomId = function(roomId){
    roomId = roomId.toString();
    if(!roomId) return [0,'roomId is null'];
    if(!roomId.match(/^\d+$/)) return [0,'roomId is illegal'];
    return [1];
};

MongoManager.prototype.checkPassword = function(password){
    if(!password) return  [0, 'password is null'];
    if(password.length < 8) return [0 , 'password is too short'];
    return [1];
}

MongoManager.prototype.checkUsername = function(name){
    if(!name) return [0,'name is null'];
    if(name.length > 20 ) return [0,'name is too long'];
    return name;
};

module.exports = MongoManager;
