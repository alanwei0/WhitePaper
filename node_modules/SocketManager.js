var ServerManager = {
    'io':{},
    'initSocketIo':function(server){
        this.io = require('socket.io').listen(server);
        this.rooms = this.io.sockets.manager.rooms;
        this.on();
    },
    'on':function(){
        this.io.sockets.on('connection', function (socket) {
            console.log('a new socket connected');

            socket.on('predraw_req',function(data){
                socket.broadcast.emit('predraw_res',data);
            });
            socket.on('draw_req',function(data){
                socket.broadcast.emit('draw_res',data);
            });
            socket.on('clearcanvas_req',function(data){
                socket.broadcast.emit('clearcanvas_res');
            });

            socket.on('initcanvas_req',function(data){
                var res = initCanvas(data);
                socket.emit('initcanvas_res',res);
            });

            socket.on('loadRoomId',function(data){
                var res_data = makeRoomId();
            });

            socket.on('createRoom',function(data){
                var check_room = checkRoomId(data[0]);
                if(check_room[0]){
                    var roomId = check_room[1];
                }else{
                    callback(check_room);
                }

                var password = data[1];

                var check_creator = checkUsername(data[2]);
                if(check_creator[0]){
                    var creator = check_creator[1];
                }else{
                    callback(check_creator);
                }

                Controller.createRoom(data);
            });

            socket.on('joinRoom',function(data,callback){
                //call function in Controller
                //check 
                //search from the cache ,then database
            });
        });
    },

    'emit': function(){

    },

    'joinRoom': function(roomname){

    },

    'leaveRoom':function(roomname){

    },

    'checkRoomId': function(roomId){
        if(!roomId) return [0,'roomId is null'];
        if(roomId.match(/^\d+$/)) return [0,'roomId is illegal'];
        if(MongoManager.roomExist(roomId)) return [0,'room is existed'];
        return [1,roomId];
    },

    'checkUsername': function(name){
        if(!name) return [0,'name is null'];
        if(name.length > 20 ) return [0,'name is too long'];
        return name;
    },


};

//===========================================================================
var util = require('util');
var EventEmitter = require('events').EventEmitter;

var SocketManager = function SocketManager(){
    this.io;
};

util.inherits(SocketManager, EventEmitter);

SocketManager.prototype.init = function(server){
    this.io = require('socket.io').listen(server);
    this.on('load_room_id_res',);
};

SocketManager.prototype.on = function(controller){
    this.io.sockets.on('connection', function (socket) {
        console.log('a new socket connected');


        
        // socket.on('predraw_req',function(data){
        //     socket.broadcast.emit('predraw_res',data);
        // });
        // socket.on('draw_req',function(data){
        //     socket.broadcast.emit('draw_res',data);
        // });
        // socket.on('clearcanvas_req',function(data){
        //     socket.broadcast.emit('clearcanvas_res');
        // });

        // socket.on('initcanvas_req',function(data){
        //     var res = initCanvas(data);
        //     socket.emit('initcanvas_res',res);
        // });

        socket.on('load_room_id_req',function(data){
            controller.emit('load_room_id_req', data);
        });

        socket.on('createRoom',function(data){
            var check_room = checkRoomId(data[0]);
            if(check_room[0]){
                var roomId = check_room[1];
            }else{
                callback(check_room);
            }

            var password = data[1];

            var check_creator = checkUsername(data[2]);
            if(check_creator[0]){
                var creator = check_creator[1];
            }else{
                callback(check_creator);
            }

            Controller.createRoom(data);
        });

        socket.on('joinRoom',function(data,callback){
            //call function in Controller
            //check 
            //search from the cache ,then database
        });
    });
};